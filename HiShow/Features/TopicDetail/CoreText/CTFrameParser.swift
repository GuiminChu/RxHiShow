//
//  CTFrameParser.swift
//  HiShow
//
//  Created by Chu Guimin on 17/3/8.
//  Copyright ¬© 2017Âπ¥ cgm. All rights reserved.
//

import UIKit

class CTFrameParser: NSObject {
    
    /// Ëß£ÊûêÊ®°ÊùøÊñá‰ª∂
    class func parseTopicInfo(topic: Topic, config: CTFrameParserConfig) -> CoreTextData {
        var imageArray = [CoreTextImageData]()
//        var linkArray  = [CoreTextLinkData]()
        
        let content = self.loadTopicInfo(topic: topic, config: config, imageArray: &imageArray)
        
        let coreTextData = self.parse(content: content, config: config)
        
        coreTextData.imageArray = imageArray
//        coreTextData.linkArray = linkArray
        
        return coreTextData
    }
    
    private static func parseTopicContentString(_ str: String) -> (String, [Int]) {
        
        var indexArray = [Int]()
        guard let _ = str.range(of: "<ÂõæÁâá") else {
            return (str, indexArray)
        }
        
        // Âà†Èô§ÊñáÊú¨‰∏≠ÁöÑ emoji
        let resultWithoutEmoji = removeEmoji(string: str)
        
        // Âà†Èô§ÊñáÊú¨‰∏≠ÁöÑÊç¢Ë°åÁ¨¶"\r" (Ê≥®Ôºö\r‰∏çÂç†Áî®Â≠óÁ¨¶)
        var result = resultWithoutEmoji.replacingOccurrences(of: "\r", with: "")
        
        while let range = result.range(of: "<ÂõæÁâá") {
            indexArray.append(result.characters.distance(from: result.startIndex, to: range.lowerBound))
            
            // ‰ªé "<ÂõæÁâá1" ÂêéÈù¢ÁöÑÂ≠óÁ¨¶‰∏≤‰∏≠Ê£ÄÁ¥¢ ">"
            let r = Range(range.lowerBound..<result.endIndex)
            // <ÂõæÁâá1> Âè≥‰æß ">" ÁöÑ Range
            let rightRange = result.range(of: ">", options: NSString.CompareOptions.caseInsensitive, range: r)
            // <ÂõæÁâá1> ÁöÑ Range
            let picRange = Range(range.lowerBound..<rightRange!.upperBound)
            result = result.replacingCharacters(in: picRange, with: "\n\n")
        }
        
        return (result, indexArray)
    }
    
    /// Âà†Èô§Â≠óÁ¨¶‰∏≤‰∏≠ÁöÑ emoji Ë°®ÊÉÖ
    ///
    /// - Parameter string:  "emoji üòÄ"
    /// - Returns:  "emoji"
    private static func removeEmoji(string: String) -> String {

        
        let emojiPattern1 = "\\U00010000-\\U0010FFFF"   // Emoticons
        let emojiPattern2 = "\\u2100-\\u27BF"           // Misc symbols and Dingbats
        let emojiPattern3 = "\\u200D\\uFE0f"            // Special Characters
        let emojiPattern4 = "\\U0001F595-\\U0001F596"   // (üñï..üññ)
        
        let pattern = "[\(emojiPattern1)\(emojiPattern2)\(emojiPattern3)\(emojiPattern4)]"

        // let emojiVariants = "\(EmojiData.EmojiPatterns.joined(separator: ""))\\uFE0F)"
        
        let regex = try! NSRegularExpression(pattern: pattern, options: [])
        let replaced = regex.stringByReplacingMatches(in: string, options: [], range: NSRange(0..<string.utf16.count), withTemplate: "")
        
        return replaced
    }
    
    /// Ê†πÊçÆËØùÈ¢ò‰ø°ÊÅØÁîüÊàê NSAttributedString ÂÆû‰æã
    ///
    /// - Parameters:
    ///   - topic: ËØùÈ¢ò
    ///   - config: ÈÖçÁΩÆ
    ///   - imageArray: ÂõæÁâáÊï∞ÁªÑ
    /// - Returns: NSAttributedStringÂÆû‰æã
    private class func loadTopicInfo(topic: Topic, config: CTFrameParserConfig, imageArray: inout [CoreTextImageData]) -> NSAttributedString {
        
        let result = NSMutableAttributedString()
        
        if let content = topic.content {
            
            // print(content)
            let tuples = parseTopicContentString(content)
            // print(tuples)
            
            // Â§ÑÁêÜÊñáÊú¨
            let attributes = self.attributes(config: config)
            result.append(NSAttributedString(string: tuples.0, attributes: attributes))
            
            // Â§ÑÁêÜÂõæÁâá
            // insertIndex ËÆ∞ÂΩïÈúÄË¶ÅÊèíÂÖ•ÂõæÁâáÁöÑÂéüÂßã‰ΩçÁΩÆÔºåÊèíÂÖ•‰∏ÄÂº†ÂõæÁâáÂêé(ÂõæÁâáÂç†‰∏Ä‰∏™Â≠óÁ¨¶)ÂéüÂßã‰ΩçÁΩÆÂêëÂè≥ÂÅèÁßª‰∏Ä‰ΩçÊâçÊòØÁúüÂÆû‰ΩçÁΩÆ
            for (offset, insertIndex) in tuples.1.enumerated() {
                
                let photoInfo = topic.photos[offset]
                
                let imageData = CoreTextImageData()
                imageData.title = photoInfo.title
                imageData.imageUrl = photoInfo.alt
                imageData.imagePosition = CGRect(x: 0.0, y: 0.0, width: 0.0, height: 0.0)
                imageArray.append(imageData)
                
                let subStr = self.parseImageAttributedCotnent(photoInfo: photoInfo, config: config)
                result.insert(subStr, at: insertIndex + offset + 1)
            }
        }

        return result
    }
    
    
    /// Ê†πÊçÆÂØåÊñáÊú¨ÁîüÊàê CoreTextData ÂÆû‰æã
    ///
    /// - Parameters:
    ///   - content: ÂØåÊñáÊú¨
    ///   - config: ÈÖçÁΩÆ
    /// - Returns: ÈúÄË¶ÅÊ∏≤ÊüìÁöÑÊï∞ÊçÆ
    private static func parse(content: NSAttributedString, config: CTFrameParserConfig) -> CoreTextData {
        // ÂàõÂª∫ CTFramesetter ÂÆû‰æã
        let framesetter = CTFramesetterCreateWithAttributedString(content)
        
        // Ëé∑ÂèñË¶ÅÁªòÂà∂ÁöÑÂå∫ÂüüÁöÑÈ´òÂ∫¶
        let restrictSize = CGSize(width: config.width, height: CGFloat.greatestFiniteMagnitude)
        let coreTextSize = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, CFRangeMake(0, 0), nil, restrictSize, nil)
        let textHeight = coreTextSize.height
        
        // ÁîüÊàê CTFrame ÂÆû‰æã
        let frame = self.creatFrame(framesetter: framesetter, config: config, height: textHeight)
        
        // Â∞ÜÁîüÊàêÁöÑ CTFrame ÂÆû‰æãÂíåËÆ°ÁÆóÂ•ΩÁöÑÁªòÂà∂È´òÂ∫¶‰øùÂ≠òÂà∞ CoreTextData ÂÆû‰æã‰∏≠
        let data = CoreTextData(ctFrame: frame, height: textHeight)
        
        // ËøîÂõû CoreTextData ÂÆû‰æã
        return data
    }
    
    
    /// ÂàõÂª∫Áü©ÂΩ¢ÊñáÂ≠óÂå∫Âüü
    ///
    /// - Parameters:
    ///   - framesetter: framesetter
    ///   - config: ÈÖçÁΩÆ
    ///   - height: È´òÂ∫¶
    /// - Returns: Áü©ÂΩ¢ÊñáÂ≠óÂå∫Âüü
    private class func creatFrame(framesetter: CTFramesetter, config: CTFrameParserConfig, height: CGFloat) -> CTFrame {
        let path = CGMutablePath()
        path.addRect(CGRect(x: 0, y: 0, width: config.width, height: height))
        
        return CTFramesetterCreateFrame(framesetter, CFRangeMake(0, 0), path, nil)
    }
    
    /// ÈÖçÁΩÆÊñáÂ≠ó‰ø°ÊÅØ
    ///
    /// - Parameter config: ÈÖçÁΩÆ‰ø°ÊÅØ
    /// - Returns: ÊñáÂ≠óÂü∫Êú¨Â±ûÊÄß
    private class func attributes(config: CTFrameParserConfig) -> [String: Any] {
        // Â≠ó‰ΩìÂ§ßÂ∞è
        let fontSize = config.fontSize
        let uiFont = UIFont.systemFont(ofSize: fontSize)
        let ctFont = CTFontCreateWithName(uiFont.fontName as CFString?, fontSize, nil)
        // Â≠ó‰ΩìÈ¢úËâ≤
        let textColor = config.textColor
        
        // Ë°åÈó¥Ë∑ù
        var lineSpacing = config.lineSpace
        
        let settings = [
            CTParagraphStyleSetting(spec: .lineSpacingAdjustment, valueSize: MemoryLayout<CGFloat>.size, value: &lineSpacing),
            CTParagraphStyleSetting(spec: .maximumLineSpacing, valueSize: MemoryLayout<CGFloat>.size, value: &lineSpacing),
            CTParagraphStyleSetting(spec: .minimumLineSpacing, valueSize: MemoryLayout<CGFloat>.size, value: &lineSpacing)
        ]
        let paragraphStyle = CTParagraphStyleCreate(settings, settings.count)
        
        // Â∞ÅË£Ö
        let dict: [String: Any] = [
            NSForegroundColorAttributeName: textColor,
            NSFontAttributeName: ctFont,
            NSParagraphStyleAttributeName: paragraphStyle
        ]
        
        return dict
    }
    
    
    class PictureRunInfo {
        
        var ascender: CGFloat
        var descender: CGFloat
        var width: CGFloat
        
        init(ascender: CGFloat, descender: CGFloat, width: CGFloat) {
            self.ascender = ascender
            self.descender = descender
            self.width = width
        }
    }
    
    /// ‰ªéÂ≠óÂÖ∏‰∏≠Ëß£ÊûêÂõæÁâáÂØåÊñáÊú¨‰ø°ÊÅØ
    ///
    /// - Parameters:
    ///   - dict: ÊñáÂ≠óÂ±ûÊÄßÂ≠óÂÖ∏
    ///   - config: ÈÖçÁΩÆ‰ø°ÊÅØ
    /// - Returns: ÂõæÁâáÂØåÊñáÊú¨
    private class func parseImageAttributedCotnent(photoInfo: Photo, config: CTFrameParserConfig) -> NSAttributedString {
        
        let imageWidth = config.width
        let imageHeight = CGFloat(photoInfo.size.height) / CGFloat(photoInfo.size.width) * imageWidth
        
        let ascender = imageHeight
        let width = imageWidth
        let pic = PictureRunInfo(ascender: ascender, descender: 0.0, width: width)
        
        var callbacks = CTRunDelegateCallbacks(version: kCTRunDelegateVersion1, dealloc: { refCon in
            print("RunDelegate dealloc!")
        }, getAscent: { (refCon) -> CGFloat in
            let pictureRunInfo = unsafeBitCast(refCon, to: PictureRunInfo.self)
            return pictureRunInfo.ascender
        }, getDescent: { (refCon) -> CGFloat in
            return 0
        }, getWidth: { (refCon) -> CGFloat in
            let pictureRunInfo = unsafeBitCast(refCon, to: PictureRunInfo.self)
            return pictureRunInfo.width
        })
        
        
        let selfPtr = UnsafeMutableRawPointer(Unmanaged.passRetained(pic).toOpaque())
        
        // ÂàõÂª∫ RunDelegate, ‰º†ÂÖ• imageCallback ‰∏≠ÂõæÁâáÊï∞ÊçÆ
        let runDelegate = CTRunDelegateCreate(&callbacks, selfPtr)
        
        
        let imageAttributedString = NSMutableAttributedString(string: " ")
        imageAttributedString.addAttribute(kCTRunDelegateAttributeName as String, value: runDelegate!, range: NSMakeRange(0, 1))
        
        return imageAttributedString
    }
}
